apiVersion: apps/v1 # API version to use for all resources in the manifest
kind: Deployment # Kind of the resource to create
metadata:
  name: {{ .Release.Name }} # Name of the resource to create
  namespace: {{ .Release.Namespace }} # Namespace to create the resource in
  labels:
    app: {{ .Values.deployment.name }} # Label to apply to the resource
spec:
  replicas: {{ .Values.deployment.replicas }} # Number of replicas to create
  strategy:
    type: RollingUpdate # Type of the deployment strategy
    rollingUpdate:
      maxSurge: {{ .Values.deployment.strategy.rollingUpdate.maxSurge }} # Maximum number of pods to create
      maxUnavailable: {{ .Values.deployment.strategy.rollingUpdate.maxUnavailable }} # Maximum number of pods to delete
  selector:
    matchLabels:
      app: {{ .Values.deployment.name }} # Label to select the resource
  template:
    metadata:
      labels:
        app: {{ .Values.deployment.name }} # Label to apply to the resource
    spec:
      containers:
        - name: {{ .Values.deployment.container.name }} # Name of the container in the pod
          image: {{ .Values.deployment.container.image }} # Image to use for the container
          imagePullPolicy: {{ .Values.deployment.container.imagePullPolicy }} # Image pull policy to use for the container
          ports:
            - containerPort: {{ .Values.deployment.container.port }} # Port to expose on the container
              protocol: {{ .Values.deployment.container.protocol }} # Protocol to use for the port
          env:
          - name: APP_NAME
            value: {{ .Values.deployment.container.env.APP_NAME }} # Environment variable to set for the container
          envFrom:
          - configMapRef:
              name: {{ .Release.Name }} # ConfigMap to use for the environment variables
          resources:
            requests:
              cpu: {{ .Values.deployment.container.resources.requests.cpu }} # CPU to request for the container
              memory: {{ .Values.deployment.container.resources.requests.memory }} # Memory to request for the container
            limits:
              cpu: {{ .Values.deployment.container.resources.limits.cpu }} # CPU to limit for the container
              memory: {{ .Values.deployment.container.resources.limits.memory }} # Memory to limit for the container
          livenessProbe:
            httpGet:
              path: {{ .Values.deployment.container.livenessProbe.path}} # Path to check for liveness
              port: {{ .Values.deployment.container.livenessProbe.port }} # Port to check for liveness
            initialDelaySeconds: {{ .Values.deployment.container.livenessProbe.initialDelaySeconds }} # Initial delay before liveness check
            timeoutSeconds: {{ .Values.deployment.container.livenessProbe.timeoutSeconds }} # Timeout before liveness check
          readinessProbe:
            httpGet:
              path: {{ .Values.deployment.container.readinessProbe.path }} # Path to check for readiness
              port: {{ .Values.deployment.container.readinessProbe.port }} # Port to check for readiness
            initialDelaySeconds: {{ .Values.deployment.container.readinessProbe.initialDelaySeconds }} # Initial delay before readiness check
            timeoutSeconds: {{ .Values.deployment.container.readinessProbe.timeoutSeconds }} # Timeout before readiness check
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
      serviceAccountName: {{ .Values.deployment.serviceAccountName }} # Service account to use for the pod
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10 # Weight of the node affinity
              preference:
                matchExpressions:
                - key: kubernetes.io/arch # Key of the node affinity
                  operator: In # Operator to use for the node affinity
                  values:
                    - arm64 # Value of the node affinity
            - weight: 10 # Weight of the node affinity
              preference:
                matchExpressions:
                - key: kubernetes.io/os # Key of the node affinity
                  operator: In # Operator to use for the node affinity
                  values:
                    - linux # Value of the node affinity
      topologySpreadConstraints:
        - maxSkew: 1 # Maximum number of pods to spread
          topologyKey: "topology.kubernetes.io/zone" # Key to use for spreading
          whenUnsatisfiable: ScheduleAnyway # Action to take if the constraint is not satisfied
          labelSelector:
            matchLabels:
              app: {{ .Release.Name }} # Label to select the resource
        - maxSkew: 1
          topologyKey: "kubernetes.io/hostname" # Key to use for spreading
          whenUnsatisfiable: ScheduleAnyway # Action to take if the constraint is not satisfied
          labelSelector:
            matchLabels:
              app: {{ .Release.Name }} # Label to select the resource